"""
Backend services integration for Streamlit app.
–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –∏–º–ø–æ—Ä—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ app.config, —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π settings
"""
import sys
from pathlib import Path

# Add backend to Python path
backend_path = Path(__file__).parent.parent.parent / "backend"
sys.path.insert(0, str(backend_path))

# Import all backend services (using correct paths from existing structure)
try:
    print(f"üìç Python path: {sys.path[:3]}")
    print(f"üìç Current working directory: {Path.cwd()}")
    print(f"üìç Backend path: {backend_path}")
    print(f"üìç Backend exists: {backend_path.exists()}")

    # Check if specific files exist
    app_path = backend_path / "app"
    services_path = app_path / "core" / "services"
    print(f"üìç App path exists: {app_path.exists()}")
    print(f"üìç Services path exists: {services_path.exists()}")

    if services_path.exists():
        print(f"üìç Services directory contains: {list(services_path.glob('*.py'))}")

    # Import core services (correct names from backend)
    from app.core.services.analytics import AnalyticsService
    from app.core.services.enhanced_analytics import EnhancedAnalyticsService
    from app.core.services.optimization import OptimizationService
    from app.core.services.advanced_optimization import AdvancedOptimizationService
    from app.core.services.risk_management import RiskManagementService
    from app.core.services.monte_carlo import MonteCarloService
    from app.core.services.time_series import TimeSeriesService
    from app.core.services.diversification import DiversificationService
    from app.core.services.scenario_service import ScenarioService
    from app.core.services.historical_service import HistoricalService
    from app.core.services.portfolio_comparison import PortfolioComparisonService
    from app.core.services.report_service import ReportService

    # Infrastructure services (correct names from backend)
    try:
        from app.infrastructure.data.data_fetcher import DataFetcherService
        print("‚úÖ DataFetcherService imported successfully")
    except ImportError as e:
        print(f"‚ùå DataFetcherService import failed: {e}")
        DataFetcherService = None

    try:
        from app.infrastructure.data.portfolio_manager import PortfolioManagerService
        print("‚úÖ PortfolioManagerService imported successfully")
    except ImportError as e:
        print(f"‚ùå PortfolioManagerService import failed: {e}")
        PortfolioManagerService = None

    try:
        from app.infrastructure.storage.json_storage import JsonStorageService
        print("‚úÖ JsonStorageService imported successfully")
    except ImportError as e:
        print(f"‚ùå JsonStorageService import failed: {e}")
        JsonStorageService = None

    try:
        from app.infrastructure.cache.memory_cache import MemoryCacheService
        print("‚úÖ MemoryCacheService imported successfully")
    except ImportError as e:
        print(f"‚ùå MemoryCacheService import failed: {e}")
        MemoryCacheService = None

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –∏–º–ø–æ—Ä—Ç app.config, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π settings
    print("‚ö†Ô∏è Using local settings instead of backend config")

    print("‚úÖ Successfully imported core backend services for Streamlit")

except ImportError as e:
    print(f"‚ùå Failed to import backend services: {e}")
    print("üìç Current working directory:", Path.cwd())
    print("üìç Backend path:", backend_path)
    print("üìç Backend exists:", backend_path.exists())

    # Set dummy services for testing if imports failed
    AnalyticsService = None
    EnhancedAnalyticsService = None
    OptimizationService = None
    AdvancedOptimizationService = None
    RiskManagementService = None
    MonteCarloService = None
    TimeSeriesService = None
    DiversificationService = None
    ScenarioService = None
    HistoricalService = None
    PortfolioComparisonService = None
    ReportService = None
    DataFetcherService = None
    PortfolioManagerService = None
    JsonStorageService = None
    MemoryCacheService = None

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π settings –æ–±—ä–µ–∫—Ç –¥–ª—è Streamlit
class StreamlitSettings:
    """Local settings for Streamlit app since backend config not available."""

    def __init__(self):
        # –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        streamlit_app_dir = Path(__file__).parent.parent  # streamlit_app/
        self.DATA_DIR = streamlit_app_dir / "data"
        self.PORTFOLIO_DIR = streamlit_app_dir / "data" / "portfolios"
        self.CACHE_DIR = streamlit_app_dir / "data" / "cache"
        self.REPORTS_DIR = streamlit_app_dir / "data" / "reports"

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.DATA_DIR.mkdir(exist_ok=True)
        self.PORTFOLIO_DIR.mkdir(parents=True, exist_ok=True)
        self.CACHE_DIR.mkdir(parents=True, exist_ok=True)
        self.REPORTS_DIR.mkdir(parents=True, exist_ok=True)

        # –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.CACHE_EXPIRY_DAYS = 1
        self.CACHE_DEFAULT_EXPIRY = 86400  # 24 hours
        self.ALPHA_VANTAGE_API_KEY = None

        print(f"üîß StreamlitSettings initialized:")
        print(f"   DATA_DIR: {self.DATA_DIR}")
        print(f"   PORTFOLIO_DIR: {self.PORTFOLIO_DIR}")
        print(f"   Portfolios dir exists: {self.PORTFOLIO_DIR.exists()}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä settings
settings = StreamlitSettings()

__all__ = [
    'AnalyticsService',
    'EnhancedAnalyticsService',
    'OptimizationService',
    'AdvancedOptimizationService',
    'RiskManagementService',
    'MonteCarloService',
    'TimeSeriesService',
    'DiversificationService',
    'ScenarioService',
    'HistoricalService',
    'PortfolioComparisonService',
    'ReportService',
    'DataFetcherService',          # Updated name
    'PortfolioManagerService',     # Updated name
    'JsonStorageService',          # Updated name
    'MemoryCacheService',          # Added
    'settings'
]